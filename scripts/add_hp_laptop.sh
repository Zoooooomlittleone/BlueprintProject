#!/bin/bash

# HP Laptop Integration Script for Docker Swarm Cluster
# This script sets up the HP laptop at 192.168.0.204 as a worker node in the Docker Swarm cluster

# Terminal colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Log function
log_message() {
    echo -e "${BLUE}[$(date '+%H:%M:%S')]${NC} $1"
}

# Check if running as root
if [ "$EUID" -ne 0 ]; then
  echo -e "${RED}This script must be run as root (use sudo)${NC}"
  exit 1
fi

echo -e "${BLUE}====================================================${NC}"
echo -e "${BLUE}     HP LAPTOP INTEGRATION FOR DOCKER SWARM         ${NC}"
echo -e "${BLUE}====================================================${NC}"
echo

# Make sure Docker is running
log_message "Ensuring Docker service is running..."
systemctl is-active --quiet docker || systemctl start docker
if ! systemctl is-active --quiet docker; then
    log_message "${RED}✗ Docker service could not be started${NC}"
    exit 1
fi

# Check if we're in swarm mode and we're a manager
log_message "Verifying swarm manager status..."
SWARM_STATUS=$(docker info --format '{{.Swarm.LocalNodeState}}' 2>/dev/null)
if [ "$SWARM_STATUS" != "active" ]; then
    log_message "${RED}✗ Not in an active swarm. Initializing swarm...${NC}"
    docker swarm init --advertise-addr 192.168.0.200 || { log_message "${RED}✗ Failed to initialize swarm${NC}"; exit 1; }
else
    NODE_ROLE=$(docker info --format '{{.Swarm.ControlAvailable}}')
    if [ "$NODE_ROLE" != "true" ]; then
        log_message "${RED}✗ This node is not a swarm manager${NC}"
        exit 1
    fi
fi

# Get the worker join token
JOIN_TOKEN=$(docker swarm join-token worker -q)
log_message "Worker join token: $JOIN_TOKEN"

# Check if the HP laptop is reachable
log_message "Checking if HP laptop is reachable..."
if ! ping -c 1 -W 2 192.168.0.204 &> /dev/null; then
    log_message "${YELLOW}⚠ HP laptop not reachable at 192.168.0.204${NC}"
    
    # Try to get MAC address from ARP table 
    HP_MAC="$(arp -n | grep "192.168.0.204" | awk '{print $3}' | head -n 1)"
    if [ -n "$HP_MAC" ]; then
        log_message "Attempting to wake HP laptop with MAC: $HP_MAC"
        wakeonlan "$HP_MAC" 2>/dev/null || etherwake "$HP_MAC" 2>/dev/null || { log_message "${RED}✗ Failed to wake HP laptop${NC}"; }
        
        # Wait for laptop to boot
        log_message "Waiting for HP laptop to boot..."
        for i in {1..30}; do
            if ping -c 1 -W 2 192.168.0.204 &> /dev/null; then
                log_message "${GREEN}✓ HP laptop is now online${NC}"
                sleep 5  # Give it some extra time to fully boot
                break
            fi
            if [ $i -eq 30 ]; then
                log_message "${RED}✗ Timed out waiting for HP laptop to respond${NC}"
                log_message "Please ensure the HP laptop is powered on and connected to the network"
                log_message "Then run this script again"
                exit 1
            fi
            sleep 2
            echo -n "."
        done
        echo
    else
        log_message "${RED}✗ Cannot find MAC address for HP laptop${NC}"
        log_message "Please ensure the HP laptop is powered on and connected to the network at 192.168.0.204"
        log_message "Then run this script again"
        exit 1
    fi
fi

# Copy the PowerShell setup script to HP laptop
log_message "Preparing to set up HP laptop..."

# Create a temporary directory
TEMP_DIR=$(mktemp -d)
HP_SCRIPT="$TEMP_DIR/setup_hp_node.ps1"

# Create the PowerShell script
log_message "Creating PowerShell setup script..."
cat > "$HP_SCRIPT" << EOL
# Docker Worker Node Setup Script for HP Laptop
# Run as Administrator in PowerShell
# Generated by add_hp_laptop.sh on $(date)

Write-Host "===============================================================" -ForegroundColor Cyan
Write-Host "   HP LAPTOP WORKER NODE SETUP                                " -ForegroundColor Cyan
Write-Host "===============================================================" -ForegroundColor Cyan
Write-Host

# Set up IP address configuration if needed
Write-Host "CHECKING NETWORK CONFIGURATION..." -ForegroundColor Yellow
\$currentIP = (Get-NetIPAddress | Where-Object {\$_.IPAddress -eq "192.168.0.204"} | Select-Object -First 1).IPAddress
if (\$currentIP -eq "192.168.0.204") {
    Write-Host "✓ IP Address correctly set to 192.168.0.204" -ForegroundColor Green
} else {
    Write-Host "✗ IP Address not set to 192.168.0.204" -ForegroundColor Red
    \$response = Read-Host "  Would you like to set the IP address now? (y/n)"
    if (\$response -eq "y") {
        \$interface = Get-NetAdapter | Where-Object {\$_.Status -eq "Up"} | Select-Object -First 1
        New-NetIPAddress -InterfaceIndex \$interface.ifIndex -IPAddress "192.168.0.204" -PrefixLength 24 -DefaultGateway "192.168.0.1"
        Write-Host "  IP Address has been set to 192.168.0.204" -ForegroundColor Green
    }
}

# Set up hostname if needed
Write-Host "`nCHECKING HOSTNAME..." -ForegroundColor Yellow
\$currentName = hostname
if (\$currentName -eq "hp-laptop") {
    Write-Host "✓ Hostname correctly set to hp-laptop" -ForegroundColor Green
} else {
    Write-Host "✗ Hostname not set to hp-laptop" -ForegroundColor Red
    \$response = Read-Host "  Would you like to set the hostname now? (y/n)"
    if (\$response -eq "y") {
        Rename-Computer -NewName "hp-laptop" -Force
        Write-Host "  Hostname set. Reboot required to apply changes." -ForegroundColor Yellow
        \$rebootNeeded = \$true
    }
}

# Update hosts file if needed
Write-Host "`nCHECKING HOSTS FILE..." -ForegroundColor Yellow
\$hostsPath = "C:\\Windows\\System32\\drivers\\etc\\hosts"
\$hostsContent = Get-Content -Path \$hostsPath -ErrorAction SilentlyContinue
\$masterEntry = "192.168.0.200`tmaster"

# Check each entry for master node (may have extra spacing)
\$hasMasterEntry = \$false
foreach (\$line in \$hostsContent) {
    if (\$line -match "192\.168\.0\.200\s+master") {
        \$hasMasterEntry = \$true
        break
    }
}

if (-not \$hasMasterEntry) {
    Write-Host "✗ Master node entry not found in hosts file" -ForegroundColor Red
    \$response = Read-Host "  Would you like to add it now? (y/n)"
    if (\$response -eq "y") {
        Add-Content -Path \$hostsPath -Value \$masterEntry -Force
        Write-Host "  Master node entry added to hosts file" -ForegroundColor Green
    }
} else {
    Write-Host "✓ Master node entry found in hosts file" -ForegroundColor Green
}

# Check Docker installation and start if needed
Write-Host "`nCHECKING DOCKER INSTALLATION..." -ForegroundColor Yellow
\$dockerInstalled = Get-Service -Name docker -ErrorAction SilentlyContinue
if (\$dockerInstalled) {
    Write-Host "✓ Docker is installed" -ForegroundColor Green
    
    if (\$dockerInstalled.Status -eq "Running") {
        Write-Host "✓ Docker service is running" -ForegroundColor Green
    } else {
        Write-Host "✗ Docker service is not running" -ForegroundColor Red
        Write-Host "  Starting Docker service..." -ForegroundColor Yellow
        Start-Service docker
        Start-Sleep -s 5
        if ((Get-Service docker).Status -eq "Running") {
            Write-Host "✓ Docker service started" -ForegroundColor Green
        } else {
            Write-Host "✗ Failed to start Docker service" -ForegroundColor Red
            exit 1
        }
    }
    
    # Check swarm status
    try {
        \$swarmStatus = docker info --format '{{.Swarm.LocalNodeState}}' 2>null
        if (\$swarmStatus -eq "active") {
            Write-Host "✓ Node is already part of Docker swarm" -ForegroundColor Green
            Write-Host "  This node appears as 'hp-laptop' in the swarm node list" -ForegroundColor Cyan
        } else {
            Write-Host "✗ Node is not part of Docker swarm" -ForegroundColor Red
            
            # Try to ping master
            \$pingTest = Test-Connection -ComputerName "192.168.0.200" -Count 1 -Quiet
            if (\$pingTest) {
                Write-Host "`nCONNECTING TO SWARM..." -ForegroundColor Yellow
                Write-Host "Joining Docker swarm with token: $JOIN_TOKEN" -ForegroundColor Yellow
                docker swarm join --token $JOIN_TOKEN 192.168.0.200:2377
                
                Start-Sleep -s 2
                \$swarmStatus = docker info --format '{{.Swarm.LocalNodeState}}' 2>null
                if (\$swarmStatus -eq "active") {
                    Write-Host "✓ Successfully joined Docker swarm" -ForegroundColor Green
                } else {
                    Write-Host "✗ Failed to join Docker swarm" -ForegroundColor Red
                }
            } else {
                Write-Host "✗ Cannot reach master node (192.168.0.200)" -ForegroundColor Red
                Write-Host "  Please check network connectivity before joining swarm" -ForegroundColor Yellow
            }
        }
    } catch {
        Write-Host "✗ Error checking swarm status: \$_" -ForegroundColor Red
    }
} else {
    Write-Host "✗ Docker is not installed" -ForegroundColor Red
    Write-Host "  Please install Docker Desktop for Windows from:" -ForegroundColor Yellow
    Write-Host "  https://www.docker.com/products/docker-desktop/" -ForegroundColor Cyan
    Write-Host "  After installation completes, restart your computer" -ForegroundColor Yellow
    Write-Host "  Then run this script again to complete the setup" -ForegroundColor Yellow
}

# Final status
Write-Host "`n===============================================================" -ForegroundColor Cyan
Write-Host "   HP LAPTOP WORKER NODE SETUP - SUMMARY                     " -ForegroundColor Cyan
Write-Host "===============================================================" -ForegroundColor Cyan

if (\$rebootNeeded) {
    Write-Host "`nSome changes require a system restart to take effect." -ForegroundColor Yellow
    \$response = Read-Host "Would you like to restart now? (y/n)"
    if (\$response -eq "y") {
        Write-Host "Restarting in 10 seconds..." -ForegroundColor Yellow
        Start-Sleep -s 10
        Restart-Computer -Force
    } else {
        Write-Host "Please restart this computer when convenient." -ForegroundColor Yellow
    }
}

Write-Host "`nTROUBLESHOOTING TIPS:" -ForegroundColor Yellow
Write-Host "• Ensure Docker Desktop is running" -ForegroundColor White
Write-Host "• Check firewall settings if you can't join the swarm" -ForegroundColor White
Write-Host "• Verify you can ping the master node (192.168.0.200)" -ForegroundColor White
Write-Host "• Run Docker commands as Administrator" -ForegroundColor White
Write-Host "• If issues persist, ensure Windows Defender Firewall allows Docker" -ForegroundColor White

Write-Host "`n===============================================================" -ForegroundColor Cyan
EOL

# Try to copy script to the HP laptop and run it
log_message "Attempting to connect to HP laptop..."

# First try, connect with SSH and copy the script
log_message "Copying setup script to HP laptop..."
scp -o StrictHostKeyChecking=no -o ConnectTimeout=5 "$HP_SCRIPT" Administrator@192.168.0.204:C:/Users/Administrator/Desktop/setup_hp_node.ps1 2>/dev/null

if [ $? -eq 0 ]; then
    log_message "${GREEN}✓ Successfully copied script to HP laptop${NC}"
    
    # Execute the script remotely
    log_message "Executing setup script on HP laptop..."
    ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 Administrator@192.168.0.204 "powershell -ExecutionPolicy Bypass -File C:/Users/Administrator/Desktop/setup_hp_node.ps1" 2>/dev/null
    
    if [ $? -eq 0 ]; then
        log_message "${GREEN}✓ Setup script executed successfully${NC}"
    else
        log_message "${RED}✗ Failed to execute setup script${NC}"
        log_message "${YELLOW}⚠ You may need to run the script manually on the HP laptop${NC}"
        log_message "The script has been copied to the HP laptop's Desktop"
        log_message "Please run it as Administrator on the HP laptop"
    fi
else
    log_message "${RED}✗ Failed to copy script to HP laptop${NC}"
    log_message "${YELLOW}⚠ Creating desktop shortcut for manual setup${NC}"
    
    # Create a desktop shortcut that will copy the script when clicked
    SHORTCUT_DIR="/home/optiplex_780_1/Desktop"
    SHORTCUT_FILE="$SHORTCUT_DIR/Setup_HP_Laptop.desktop"
    
    cat > "$SHORTCUT_FILE" << EOL
[Desktop Entry]
Type=Application
Terminal=true
Name=Setup HP Laptop Node
Exec=bash -c "cp $HP_SCRIPT /tmp/setup_hp_node.ps1 && echo 'Script copied to /tmp/setup_hp_node.ps1' && echo 'Please transfer this file to the HP laptop and run it as Administrator' && read -p 'Press Enter to close'"
Icon=utilities-terminal
Comment=Set up HP laptop as Docker Swarm worker node
Path=$SHORTCUT_DIR
EOL
    
    chmod +x "$SHORTCUT_FILE"
    
    log_message "Desktop shortcut created: Setup_HP_Laptop.desktop"
    log_message "Click this shortcut to copy the setup script, then transfer it to the HP laptop"
fi

# Clean up
rm -rf "$TEMP_DIR"

# Verify if the HP laptop node has joined the swarm
log_message "Verifying HP laptop node status in swarm..."
sleep 5  # Give it a moment to register

if docker node ls | grep -q "hp-laptop"; then
    log_message "${GREEN}✓ HP laptop has joined the swarm${NC}"
    
    # Add node labels
    NODE_ID=$(docker node ls --format '{{.ID}} {{.Hostname}}' | grep "hp-laptop" | awk '{print $1}')
    if [ -n "$NODE_ID" ]; then
        log_message "Adding type=laptop label to HP laptop node..."
        docker node update --label-add "type=laptop" "$NODE_ID"
        log_message "${GREEN}✓ Label added to HP laptop node${NC}"
    fi
else
    log_message "${YELLOW}⚠ HP laptop has not yet joined the swarm${NC}"
    log_message "You may need to manually complete the setup on the HP laptop"
    log_message "Run the following command on the HP laptop as Administrator:"
    log_message "docker swarm join --token $JOIN_TOKEN 192.168.0.200:2377"
fi

log_message "${GREEN}✓ HP laptop integration process completed${NC}"
echo -e "${BLUE}====================================================${NC}"
# ORGANIZED: Copy stored in ~/cluster-scripts/[category]
