#!/bin/bash

# Lenovo Laptop Integration Script for Docker Swarm Cluster
# This script sets up the Lenovo laptop at 192.168.0.205 as a worker node in the Docker Swarm cluster

# Terminal colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Log function
log_message() {
    echo -e "${BLUE}[$(date '+%H:%M:%S')]${NC} $1"
}

# Check if running as root
if [ "$EUID" -ne 0 ]; then
  echo -e "${RED}This script must be run as root (use sudo)${NC}"
  exit 1
fi

echo -e "${BLUE}====================================================${NC}"
echo -e "${BLUE}     LENOVO LAPTOP INTEGRATION FOR DOCKER SWARM     ${NC}"
echo -e "${BLUE}====================================================${NC}"
echo

# Make sure Docker is running
log_message "Ensuring Docker service is running..."
systemctl is-active --quiet docker || systemctl start docker
if ! systemctl is-active --quiet docker; then
    log_message "${RED}✗ Docker service could not be started${NC}"
    exit 1
fi

# Check if we're in swarm mode and we're a manager
log_message "Verifying swarm manager status..."
SWARM_STATUS=$(docker info --format '{{.Swarm.LocalNodeState}}' 2>/dev/null)
if [ "$SWARM_STATUS" != "active" ]; then
    log_message "${RED}✗ Not in an active swarm. Initializing swarm...${NC}"
    docker swarm init --advertise-addr 192.168.0.200 || { log_message "${RED}✗ Failed to initialize swarm${NC}"; exit 1; }
else
    NODE_ROLE=$(docker info --format '{{.Swarm.ControlAvailable}}')
    if [ "$NODE_ROLE" != "true" ]; then
        log_message "${RED}✗ This node is not a swarm manager${NC}"
        exit 1
    fi
fi

# Get the worker join token
JOIN_TOKEN=$(docker swarm join-token worker -q)
log_message "Worker join token: $JOIN_TOKEN"

# Check if the Lenovo laptop is reachable
log_message "Checking if Lenovo laptop is reachable..."
if ! ping -c 1 -W 2 192.168.0.205 &> /dev/null; then
    log_message "${YELLOW}⚠ Lenovo laptop not reachable at 192.168.0.205${NC}"
    
    # Try to get MAC address from ARP table 
    LENOVO_MAC="$(arp -n | grep "192.168.0.205" | awk '{print $3}' | head -n 1)"
    if [ -n "$LENOVO_MAC" ]; then
        log_message "Attempting to wake Lenovo laptop with MAC: $LENOVO_MAC"
        wakeonlan "$LENOVO_MAC" 2>/dev/null || etherwake "$LENOVO_MAC" 2>/dev/null || { log_message "${RED}✗ Failed to wake Lenovo laptop${NC}"; }
        
        # Wait for laptop to boot
        log_message "Waiting for Lenovo laptop to boot..."
        for i in {1..30}; do
            if ping -c 1 -W 2 192.168.0.205 &> /dev/null; then
                log_message "${GREEN}✓ Lenovo laptop is now online${NC}"
                sleep 5  # Give it some extra time to fully boot
                break
            fi
            if [ $i -eq 30 ]; then
                log_message "${RED}✗ Timed out waiting for Lenovo laptop to respond${NC}"
                log_message "Please ensure the Lenovo laptop is powered on and connected to the network"
                log_message "Then run this script again"
                exit 1
            fi
            sleep 2
            echo -n "."
        done
        echo
    else
        log_message "${RED}✗ Cannot find MAC address for Lenovo laptop${NC}"
        log_message "Please ensure the Lenovo laptop is powered on and connected to the network at 192.168.0.205"
        log_message "Then run this script again"
        exit 1
    fi
fi

# Create temporary directory for scripts
TEMP_DIR=$(mktemp -d)
LENOVO_SCRIPT="$TEMP_DIR/setup_lenovo_node.ps1"

# Create the PowerShell setup script
log_message "Creating PowerShell setup script..."
cat > "$LENOVO_SCRIPT" << EOL
# Docker Worker Node Setup Script for Lenovo Laptop
# Run as Administrator in PowerShell
# Generated by add_lenovo_laptop.sh on $(date)

Write-Host "===============================================================" -ForegroundColor Cyan
Write-Host "   LENOVO LAPTOP WORKER NODE SETUP                            " -ForegroundColor Cyan
Write-Host "===============================================================" -ForegroundColor Cyan
Write-Host

# Set up IP address configuration if needed
Write-Host "CHECKING NETWORK CONFIGURATION..." -ForegroundColor Yellow
\$currentIP = (Get-NetIPAddress | Where-Object {\$_.IPAddress -eq "192.168.0.205"} | Select-Object -First 1).IPAddress
if (\$currentIP -eq "192.168.0.205") {
    Write-Host "✓ IP Address correctly set to 192.168.0.205" -ForegroundColor Green
} else {
    Write-Host "✗ IP Address not set to 192.168.0.205" -ForegroundColor Red
    \$response = Read-Host "  Would you like to set the IP address now? (y/n)"
    if (\$response -eq "y") {
        \$interface = Get-NetAdapter | Where-Object {\$_.Status -eq "Up"} | Select-Object -First 1
        New-NetIPAddress -InterfaceIndex \$interface.ifIndex -IPAddress "192.168.0.205" -PrefixLength 24 -DefaultGateway "192.168.0.1"
        Write-Host "  IP Address has been set to 192.168.0.205" -ForegroundColor Green
    }
}

# Update hosts file if needed
Write-Host "`nCHECKING HOSTS FILE..." -ForegroundColor Yellow
\$hostsPath = "C:\\Windows\\System32\\drivers\\etc\\hosts"
\$hostsContent = Get-Content -Path \$hostsPath -ErrorAction SilentlyContinue
\$masterEntry = "192.168.0.200`tmaster"

# Check each entry for master node (may have extra spacing)
\$hasMasterEntry = \$false
foreach (\$line in \$hostsContent) {
    if (\$line -match "192\.168\.0\.200\s+master") {
        \$hasMasterEntry = \$true
        break
    }
}

if (-not \$hasMasterEntry) {
    Write-Host "✗ Master node entry not found in hosts file" -ForegroundColor Red
    \$response = Read-Host "  Would you like to add it now? (y/n)"
    if (\$response -eq "y") {
        Add-Content -Path \$hostsPath -Value \$masterEntry -Force
        Write-Host "  Master node entry added to hosts file" -ForegroundColor Green
    }
} else {
    Write-Host "✓ Master node entry found in hosts file" -ForegroundColor Green
}

# Check Docker installation and start if needed
Write-Host "`nCHECKING DOCKER INSTALLATION..." -ForegroundColor Yellow
\$dockerInstalled = Get-Service -Name docker -ErrorAction SilentlyContinue
if (\$dockerInstalled) {
    Write-Host "✓ Docker is installed" -ForegroundColor Green
    
    if (\$dockerInstalled.Status -eq "Running") {
        Write-Host "✓ Docker service is running" -ForegroundColor Green
    } else {
        Write-Host "✗ Docker service is not running" -ForegroundColor Red
        Write-Host "  Starting Docker service..." -ForegroundColor Yellow
        Start-Service docker
        Start-Sleep -s 5
        if ((Get-Service docker).Status -eq "Running") {
            Write-Host "✓ Docker service started" -ForegroundColor Green
        } else {
            Write-Host "✗ Failed to start Docker service" -ForegroundColor Red
            exit 1
        }
    }
    
    # Check swarm status
    try {
        \$swarmStatus = docker info --format '{{.Swarm.LocalNodeState}}' 2>null
        if (\$swarmStatus -eq "active") {
            Write-Host "✓ Node is already part of Docker swarm" -ForegroundColor Green
            Write-Host "  This node appears as 'docker-desktop' in the swarm node list" -ForegroundColor Cyan
        } else {
            Write-Host "✗ Node is not part of Docker swarm" -ForegroundColor Red
            
            # Try to ping master
            \$pingTest = Test-Connection -ComputerName "192.168.0.200" -Count 1 -Quiet
            if (\$pingTest) {
                Write-Host "`nCONNECTING TO SWARM..." -ForegroundColor Yellow
                Write-Host "Joining Docker swarm with token: $JOIN_TOKEN" -ForegroundColor Yellow
                docker swarm join --token $JOIN_TOKEN 192.168.0.200:2377
                
                Start-Sleep -s 2
                \$swarmStatus = docker info --format '{{.Swarm.LocalNodeState}}' 2>null
                if (\$swarmStatus -eq "active") {
                    Write-Host "✓ Successfully joined Docker swarm" -ForegroundColor Green
                } else {
                    Write-Host "✗ Failed to join Docker swarm" -ForegroundColor Red
                }
            } else {
                Write-Host "✗ Cannot reach master node (192.168.0.200)" -ForegroundColor Red
                Write-Host "  Please check network connectivity before joining swarm" -ForegroundColor Yellow
            }
        }
    } catch {
        Write-Host "✗ Error checking swarm status: \$_" -ForegroundColor Red
    }
} else {
    Write-Host "✗ Docker is not installed" -ForegroundColor Red
    Write-Host "  Please install Docker Desktop for Windows from:" -ForegroundColor Yellow
    Write-Host "  https://www.docker.com/products/docker-desktop/" -ForegroundColor Cyan
    Write-Host "  After installation completes, restart your computer" -ForegroundColor Yellow
    Write-Host "  Then run this script again to complete the setup" -ForegroundColor Yellow
}

# Set up convenience scripts
Write-Host "`nSETTING UP CONVENIENCE SCRIPTS..." -ForegroundColor Yellow
\$scriptDir = "C:\\Docker\\Scripts"
if (-not (Test-Path \$scriptDir)) {
    New-Item -ItemType Directory -Force -Path \$scriptDir
    Write-Host "  Created scripts directory" -ForegroundColor Green
}

# Create script to check swarm status
\$statusScript = @"
# Docker Swarm Status Script
Write-Host "==== DOCKER SWARM STATUS ====" -ForegroundColor Cyan
Write-Host "Checking Docker service..." -ForegroundColor Yellow
\$dockerService = Get-Service -Name docker -ErrorAction SilentlyContinue
if (\$dockerService -and \$dockerService.Status -eq "Running") {
    Write-Host "Docker service is running" -ForegroundColor Green
} else {
    Write-Host "Docker service is NOT running" -ForegroundColor Red
    exit
}

Write-Host "`nChecking swarm status..." -ForegroundColor Yellow
\$swarmStatus = docker info --format '{{.Swarm.LocalNodeState}}' 2>null
if (\$swarmStatus -eq "active") {
    Write-Host "This node is part of a Docker swarm" -ForegroundColor Green
    Write-Host "`nNode information:" -ForegroundColor Yellow
    docker node ls
} else {
    Write-Host "This node is NOT part of a Docker swarm" -ForegroundColor Red
}
"@

Set-Content -Path "\$scriptDir\\check_swarm.ps1" -Value \$statusScript
Write-Host "  Created swarm status script" -ForegroundColor Green

# Create script to rejoin swarm
\$rejoinScript = @"
# Docker Swarm Rejoin Script
Write-Host "==== DOCKER SWARM REJOIN ====" -ForegroundColor Cyan
Write-Host "Checking Docker service..." -ForegroundColor Yellow
\$dockerService = Get-Service -Name docker -ErrorAction SilentlyContinue
if (\$dockerService -and \$dockerService.Status -eq "Running") {
    Write-Host "Docker service is running" -ForegroundColor Green
} else {
    Write-Host "Docker service is NOT running" -ForegroundColor Red
    Write-Host "Starting Docker service..." -ForegroundColor Yellow
    Start-Service docker
    Start-Sleep -s 5
}

Write-Host "`nChecking swarm status..." -ForegroundColor Yellow
\$swarmStatus = docker info --format '{{.Swarm.LocalNodeState}}' 2>null
if (\$swarmStatus -eq "active") {
    Write-Host "This node is already part of a Docker swarm" -ForegroundColor Green
    exit
}

Write-Host "This node is NOT part of a Docker swarm" -ForegroundColor Yellow
Write-Host "Attempting to rejoin swarm..." -ForegroundColor Yellow
docker swarm join --token $JOIN_TOKEN 192.168.0.200:2377
"@

Set-Content -Path "\$scriptDir\\rejoin_swarm.ps1" -Value \$rejoinScript
Write-Host "  Created swarm rejoin script" -ForegroundColor Green

# Create desktop shortcuts
\$WshShell = New-Object -ComObject WScript.Shell
\$Shortcut = \$WshShell.CreateShortcut("\$env:USERPROFILE\\Desktop\\Check Swarm Status.lnk")
\$Shortcut.TargetPath = "powershell.exe"
\$Shortcut.Arguments = "-ExecutionPolicy Bypass -File \"\$scriptDir\\check_swarm.ps1\""
\$Shortcut.Save()

\$Shortcut = \$WshShell.CreateShortcut("\$env:USERPROFILE\\Desktop\\Rejoin Swarm.lnk")
\$Shortcut.TargetPath = "powershell.exe"
\$Shortcut.Arguments = "-ExecutionPolicy Bypass -File \"\$scriptDir\\rejoin_swarm.ps1\""
\$Shortcut.Save()

Write-Host "  Created desktop shortcuts" -ForegroundColor Green

# Final status
Write-Host "`n===============================================================" -ForegroundColor Cyan
Write-Host "   LENOVO LAPTOP WORKER NODE SETUP - COMPLETE                 " -ForegroundColor Cyan
Write-Host "===============================================================" -ForegroundColor Cyan

Write-Host "`nUSEFUL COMMANDS:" -ForegroundColor Yellow
Write-Host "• Check swarm status: docker node ls" -ForegroundColor White
Write-Host "• View swarm services: docker service ls" -ForegroundColor White
Write-Host "• Leave swarm: docker swarm leave" -ForegroundColor White
Write-Host "• Desktop shortcuts have been created for common tasks" -ForegroundColor White

Write-Host "`n===============================================================" -ForegroundColor Cyan
EOL

# Try to copy script to the Lenovo laptop and run it
log_message "Attempting to connect to Lenovo laptop..."

# Determine correct user to use for SSH
log_message "Checking for Administrator access..."
SSH_SUCCESS=false

# Try Administrator account first
if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 Administrator@192.168.0.205 "echo Connected" &>/dev/null; then
    log_message "${GREEN}✓ Connected with Administrator account${NC}"
    WINDOWS_USER="Administrator"
    SSH_SUCCESS=true
else
    log_message "${YELLOW}Cannot connect with Administrator account, trying alternatives...${NC}"
    
    # Try common Windows usernames
    for USERNAME in "user" "User" "admin" "owner" "lenovo"; do
        if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 "$USERNAME@192.168.0.205" "echo Connected" &>/dev/null; then
            log_message "${GREEN}✓ Connected with $USERNAME account${NC}"
            WINDOWS_USER="$USERNAME"
            SSH_SUCCESS=true
            break
        fi
    done
fi

if [ "$SSH_SUCCESS" = true ]; then
    # Copy the script to the Lenovo laptop
    log_message "Copying setup script to Lenovo laptop..."
    scp -o StrictHostKeyChecking=no -o ConnectTimeout=5 "$LENOVO_SCRIPT" "$WINDOWS_USER@192.168.0.205:C:/Users/$WINDOWS_USER/Desktop/setup_lenovo_node.ps1" 2>/dev/null
    
    if [ $? -eq 0 ]; then
        log_message "${GREEN}✓ Successfully copied script to Lenovo laptop${NC}"
        
        # Execute the script remotely
        log_message "Executing setup script on Lenovo laptop..."
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 "$WINDOWS_USER@192.168.0.205" "powershell -ExecutionPolicy Bypass -File C:/Users/$WINDOWS_USER/Desktop/setup_lenovo_node.ps1" 2>/dev/null
        
        if [ $? -eq 0 ]; then
            log_message "${GREEN}✓ Setup script executed successfully${NC}"
        else
            log_message "${RED}✗ Failed to execute setup script${NC}"
            log_message "${YELLOW}⚠ You may need to run the script manually on the Lenovo laptop${NC}"
            log_message "The script has been copied to the Lenovo laptop's Desktop"
            log_message "Please run it as Administrator on the Lenovo laptop"
        fi
    else
        log_message "${RED}✗ Failed to copy script to Lenovo laptop${NC}"
        create_shortcut=true
    fi
else
    log_message "${RED}✗ Could not establish SSH connection to Lenovo laptop${NC}"
    log_message "${YELLOW}⚠ Manual setup required${NC}"
    create_shortcut=true
fi

# Create a desktop shortcut for manual setup if needed
if [ "$create_shortcut" = true ]; then
    log_message "${YELLOW}⚠ Creating desktop shortcut for manual setup${NC}"
    
    # Create a desktop shortcut that will copy the script when clicked
    SHORTCUT_DIR="/home/optiplex_780_1/Desktop"
    SHORTCUT_FILE="$SHORTCUT_DIR/Setup_Lenovo_Laptop.desktop"
    
    cat > "$SHORTCUT_FILE" << EOL
[Desktop Entry]
Type=Application
Terminal=true
Name=Setup Lenovo Laptop Node
Exec=bash -c "cp $LENOVO_SCRIPT /tmp/setup_lenovo_node.ps1 && echo 'Script copied to /tmp/setup_lenovo_node.ps1' && echo 'Please transfer this file to the Lenovo laptop and run it as Administrator' && read -p 'Press Enter to close'"
Icon=utilities-terminal
Comment=Set up Lenovo laptop as Docker Swarm worker node
Path=$SHORTCUT_DIR
EOL
    
    chmod +x "$SHORTCUT_FILE"
    
    log_message "Desktop shortcut created: Setup_Lenovo_Laptop.desktop"
    log_message "Click this shortcut to copy the setup script, then transfer it to the Lenovo laptop"
fi

# Create monitor script for Lenovo laptop
log_message "Creating Lenovo laptop monitoring script..."

MONITOR_SCRIPT="/home/optiplex_780_1/Desktop/BlueprintProject/scripts/monitor_lenovo_laptop.sh"
cat > "$MONITOR_SCRIPT" << EOL
#!/bin/bash

# Lenovo Laptop Monitoring Script for Docker Swarm Cluster
# This script checks the status of the Lenovo laptop in the Docker Swarm cluster

# Terminal colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}====================================================${NC}"
echo -e "${BLUE}     LENOVO LAPTOP DOCKER SWARM STATUS             ${NC}"
echo -e "${BLUE}====================================================${NC}"
echo

# Check if Lenovo laptop is reachable
echo -e "${YELLOW}Checking if Lenovo laptop is reachable...${NC}"
if ping -c 1 -W 2 192.168.0.205 &> /dev/null; then
    echo -e "${GREEN}✓ Lenovo laptop is reachable at 192.168.0.205${NC}"
    
    # Check Docker Swarm status on manager node
    echo -e "${YELLOW}Checking Docker Swarm status from manager node...${NC}"
    if docker node ls | grep -q "docker-desktop"; then
        NODE_ID=\$(docker node ls --format '{{.ID}} {{.Hostname}}' | grep "docker-desktop" | awk '{print \$1}')
        NODE_STATUS=\$(docker node inspect "\$NODE_ID" --format '{{.Status.State}}')
        
        if [ "\$NODE_STATUS" = "ready" ]; then
            echo -e "${GREEN}✓ Lenovo laptop (docker-desktop) is active in the swarm${NC}"
            
            # Check node details
            echo -e "${YELLOW}Node details:${NC}"
            docker node inspect "\$NODE_ID" --format 'ID: {{.ID}}\nHostname: {{.Description.Hostname}}\nStatus: {{.Status.State}}\nAvailability: {{.Spec.Availability}}\nManager Status: {{.ManagerStatus.Leader}}\nLabels: {{range \$k, \$v := .Spec.Labels}}{{"\$k=\$v "}}{{end}}'
            
            # Check containers running on the node
            echo -e "\n${YELLOW}Containers running on this node:${NC}"
            docker node ps "\$NODE_ID"
        else
            echo -e "${YELLOW}⚠ Lenovo laptop (docker-desktop) is in '\$NODE_STATUS' state${NC}"
        fi
    else
        echo -e "${RED}✗ Lenovo laptop (docker-desktop) is not in the swarm${NC}"
        echo -e "You need to run the join command on the Lenovo laptop:"
        echo -e "docker swarm join --token \$(docker swarm join-token worker -q) 192.168.0.200:2377"
    fi
    
    # Try to connect to the Lenovo laptop directly
    echo -e "\n${YELLOW}Attempting to connect to Lenovo laptop directly...${NC}"
    
    # Try common Windows usernames
    SSH_SUCCESS=false
    for USERNAME in "Administrator" "user" "User" "admin" "owner" "lenovo"; do
        if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=3 "\$USERNAME@192.168.0.205" "echo Connected" &>/dev/null; then
            echo -e "${GREEN}✓ Connected with \$USERNAME account${NC}"
            
            # Check Docker status
            DOCKER_RUNNING=\$(ssh -o StrictHostKeyChecking=no "\$USERNAME@192.168.0.205" "powershell -Command \"(Get-Service -Name docker).Status\"" 2>/dev/null)
            
            if [[ "\$DOCKER_RUNNING" == *"Running"* ]]; then
                echo -e "${GREEN}✓ Docker service is running on Lenovo laptop${NC}"
                
                # Check swarm status
                SWARM_STATUS=\$(ssh -o StrictHostKeyChecking=no "\$USERNAME@192.168.0.205" "powershell -Command \"docker info --format '{{.Swarm.LocalNodeState}}'\"" 2>/dev/null)
                
                if [ "\$SWARM_STATUS" = "active" ]; then
                    echo -e "${GREEN}✓ Lenovo laptop reports it is in the swarm${NC}"
                else
                    echo -e "${RED}✗ Lenovo laptop reports it is NOT in the swarm${NC}"
                    echo -e "To rejoin the swarm, run this command on the Lenovo laptop:"
                    echo -e "docker swarm join --token \$(docker swarm join-token worker -q) 192.168.0.200:2377"
                fi
            else
                echo -e "${RED}✗ Docker service is not running on Lenovo laptop${NC}"
                echo -e "To start Docker service, run this command on the Lenovo laptop:"
                echo -e "powershell -Command \"Start-Service docker\""
            fi
            
            SSH_SUCCESS=true
            break
        fi
    done
    
    if [ "\$SSH_SUCCESS" = false ]; then
        echo -e "${RED}✗ Could not establish SSH connection to Lenovo laptop${NC}"
        echo -e "Please ensure that SSH server is running on the Lenovo laptop"
    fi
else
    echo -e "${RED}✗ Lenovo laptop not reachable at 192.168.0.205${NC}"
    echo -e "Please ensure the Lenovo laptop is powered on and connected to the network"
    
    # Try to wake up the laptop if it's offline
    LENOVO_MAC="\$(arp -n | grep \"192.168.0.205\" | awk '{print \$3}' | head -n 1)"
    if [ -n "\$LENOVO_MAC" ]; then
        echo -e "${YELLOW}Attempting to wake Lenovo laptop with MAC: \$LENOVO_MAC${NC}"
        wakeonlan "\$LENOVO_MAC" 2>/dev/null || etherwake "\$LENOVO_MAC" 2>/dev/null
        echo -e "Wake-on-LAN packet sent. Please wait a few minutes for the laptop to boot up"
    fi
fi

echo -e "${BLUE}====================================================${NC}"
EOL

chmod +x "$MONITOR_SCRIPT"

# Create desktop shortcut for monitoring
log_message "Creating desktop shortcut for Lenovo laptop monitoring..."
SHORTCUT_FILE="/home/optiplex_780_1/Desktop/Monitor_Lenovo_Laptop.desktop"

cat > "$SHORTCUT_FILE" << EOL
[Desktop Entry]
Type=Application
Terminal=true
Name=Monitor Lenovo Laptop
Exec=$MONITOR_SCRIPT
Icon=utilities-terminal
Comment=Check the status of the Lenovo laptop in the Docker Swarm cluster
Path=/home/optiplex_780_1/Desktop
EOL

chmod +x "$SHORTCUT_FILE"

# Clean up
rm -rf "$TEMP_DIR"

# Verify if the Lenovo laptop node has joined the swarm
log_message "Verifying Lenovo laptop node status in swarm..."
sleep 5  # Give it a moment to register

if docker node ls | grep -q "docker-desktop"; then
    log_message "${GREEN}✓ Lenovo laptop has joined the swarm as 'docker-desktop'${NC}"
    
    # Add node labels
    NODE_ID=$(docker node ls --format '{{.ID}} {{.Hostname}}' | grep "docker-desktop" | awk '{print $1}')
    if [ -n "$NODE_ID" ]; then
        log_message "Adding type=laptop label to Lenovo laptop node..."
        docker node update --label-add "type=laptop" "$NODE_ID"
        log_message "${GREEN}✓ Label added to Lenovo laptop node${NC}"
    fi
else
    log_message "${YELLOW}⚠ Lenovo laptop has not yet joined the swarm${NC}"
    log_message "You may need to manually complete the setup on the Lenovo laptop"
    log_message "Run the following command on the Lenovo laptop as Administrator:"
    log_message "docker swarm join --token $JOIN_TOKEN 192.168.0.200:2377"
fi

log_message "${GREEN}✓ Lenovo laptop integration process completed${NC}"
echo -e "${BLUE}====================================================${NC}"
# ORGANIZED: Copy stored in ~/cluster-scripts/[category]
